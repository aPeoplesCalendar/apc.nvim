==============================================================================
------------------------------------------------------------------------------

People's Calendar (aPC) is a project that seeks to promote the worldwide
of working class movements and liberation struggles in the form of a
"On This Day" calendar.

plugin is a neovim interface to the aPC database.
can contribute to the project by adding events to the database, or by
code for this plugin.


------------------------------------------------------------------------------
                                                                     *M.setup()*
                               `M.setup`({opts})
up the plugin
Parameters ~
{opts} `(table)` @Configuration options
Usage ~
`require("apeoplescalendar").setup()`
Usage ~
`require("apeoplescalendar").setup({auto_teaser_filetypes = {"alpha", "dashboard", "starter"}})`

------------------------------------------------------------------------------
                                                                     *M.today()*
                               `M.today`({opts})
all events of the day
Parameters ~
{opts} `(table)` @Configuration options
Usage ~
`require("apeoplescalendar").today()`

------------------------------------------------------------------------------
                                                              *M.today_teaser()*
                               `M.today_teaser`()
teaser for one random event of the day
Usage ~
`require("apeoplescalendar").today_teaser()`


==============================================================================
------------------------------------------------------------------------------
                                                      *generate_tmp_file_path()*
                           `generate_tmp_file_path`()
Generate a temporary file path
Return ~
`(string)`

------------------------------------------------------------------------------
                                                    *test_internet_connection()*
                          `test_internet_connection`()
Check if there is an internet connection
Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                            *fetch_apc_events()*
                              `fetch_apc_events`()
Fetches events from the APC database
Return ~
`(table)`

------------------------------------------------------------------------------
                                                              *format_up_to_x()*
                      `format_up_to_x`({s}, {x}, {indent})
Formats a string to a maximum width
Parameters ~
{s} `(string)` The string to format
{x} `(integer)` The maximum width
{indent} `(integer)` The (optional) indentation to use
Return ~
`(string)`

------------------------------------------------------------------------------
                                                *string_to_table_by_linebreak()*
                `string_to_table_by_linebreak`({table}, {plain})
Converts a string to a table by linebreak
Parameters ~
{table} `(table)` The table to add the lines to
{plain} `(string)` The string to convert
Return ~
`(table)` The table with the lines added

------------------------------------------------------------------------------
                                                               *json_to_table()*
                           `json_to_table`({encoded})
Converts a JSON string to a table
Parameters ~
{encoded} `(string)` The JSON string to convert
Return ~
`(table)` The table

------------------------------------------------------------------------------
                                                                *table_to_rst()*
                            `table_to_rst`({events})
Converts a table to a reStructuredText string
Parameters ~
{events} `(table)` The table to convert
Return ~
`(string)` The reStructuredText string

------------------------------------------------------------------------------
                                                              *A.today_teaser()*
                               `A.today_teaser`()
Opens a teaser with notify

------------------------------------------------------------------------------
                                                                     *A.today()*
                                  `A.today`()
Opens the "today" buffer


==============================================================================
------------------------------------------------------------------------------
                                                                             *C*
                                      `C`
apeoplescalendar.config Configuration

------------------------------------------------------------------------------
Class ~
{Config}

------------------------------------------------------------------------------
                                                                    *C.defaults*
                                  `C.defaults`
Class ~
{ConfigDefaults}

------------------------------------------------------------------------------
                                                                     *C.setup()*
                               `C.setup`({opts})
Parameters ~
{opts} Config
Usage ~
`require("apeoplescalendar.config").setup({auto_teaser_filetypes = {"alpha", "dashboard", "starter"}})


 vim:tw=78:ts=8:noet:ft=help:norl: